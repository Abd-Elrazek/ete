#!/usr/bin/python
#        Author: Francois-Jose Serra
# Creation Date: 2010/04/26 17:17:06

from ete_dev.codeml import CodemlTree
import sys, re

typ = 'S'
#while typ != 'L' and typ != 'S':
#    typ = raw_input (\
#        "choose kind of example [L]ong or [S]hort, hit [L] or [S]:\n")

TREE_PATH    = "data/measuring_%s_tree.nw" % (typ)

ALG_PATH     = "data/alignment_%s_measuring_evol.fasta" % (typ)
WORKING_PATH = "data/"

MY_PATH = '/home/francisco/toolbox/ete2-codeml/doc/tutorial/examples/'
MY_PATH = ''

TREE_PATH = MY_PATH + re.sub('\./', '', TREE_PATH)
ALG_PATH  = MY_PATH + re.sub('\./', '', ALG_PATH )

###
# load tree

###
# re-run without reeeeeeeeee-run
T = CodemlTree (TREE_PATH)
T.link_to_alignment (ALG_PATH)
T.workdir = (WORKING_PATH)
T.link_to_evol_model(T.workdir + '/fb/out','fb')
T.link_to_evol_model(T.workdir + '/M1/out','M1')
T.link_to_evol_model(T.workdir + '/M2/out','M2')
T.add_histface('M2', down=False)
T.add_histface('M2',typ='error', lines=[1.0,0.3],col_lines=['black','grey'])

T.show()

###
# mark tree functionality
print T.write(format=10)
name = None
while name not in T.get_leaf_names():
    name = raw_input('         ====> As you need to mark some branches to run branch\n\
    models, type the name of one leaf: ')

idname = T.get_leaves_by_name(name)[0].idname

print '         ----> you want to mark:',name,'that has this idname: ', idname
T.mark_tree([idname]) # by default will mark with '#1'
print 'have a look to the mark: '
print re.sub('#','|',re.sub('[0-9a-zA-Z_(),;]',' ',T.write(format=10)))
print re.sub('#','v',re.sub('[0-9a-zA-Z_(),;]',' ',T.write(format=10)))
print T.write(format=10)
print '\n You have marked the tree with a command like:  T.mark_tree([%d])\n' % (idname)
print '\n%s\n%s\n%s\n' % ('*'*10 + ' doc ' + '*'*10, T.mark_tree.func_doc, \
                                                                      '*'*30)

print '\n\n\n         ----> We are now going to run branch-site models bsA and bsA1:\n\n'
raw_input("         ====> hit some key to start computation with our marked tree")
for model in ['bsA','bsA1']:
    print 'running model ' + model
    T.run_paml(model)


print '\n\n\n            ----> again we use the get_most_likely function to compute the LRT between those models:\n'
raw_input("         ====> Hit some key to launch LRT")

pv = T.get_most_likely('bsA', 'bsA1')
if pv <= 0.05:
    print '         ---->   -> most likely model is model bsA, there is positive selection, pval: ',pv
    print '                         ' + name + ' is under positive selection.'
else:
    print '         ---->   -> most likely model is model bsA1, pval of LRT: ',pv
    print '                         ' + name + ' is not under positive selection.'








print '\n\n         ---->  more or less, all we have done here is feasable from the GUI,'
print '                 try to reload our runs through it....'
raw_input('hit something to start')

T = CodemlTree(TREE_PATH)
T.link_to_alignment(ALG_PATH)
T.workdir = (WORKING_PATH)
T.show()
sys.stderr.write('\n\nThe End.\n\n')



